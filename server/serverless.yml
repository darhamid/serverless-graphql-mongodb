service:
  name: test-app

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 512
  timeout: 30
  cfLogs: true
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment: ${self:custom.environment}

plugins:
  - serverless-offline

custom:
  defaultStage: local
  defaultRegion: us-west-2

  # store all environment variables in this variable to be used throughout the file
  environment: ${file(./variables/env.js):environment.${self:provider.stage}-${self:provider.region}}

  # authorize to be used throughout the file
  authorizer:
    name: authorizer
    resultTtlInSeconds: 1800
    identitySource: method.request.header.Authorization
  cors:
    origins:
      - '*'
    headers:
      - Content-Type
      - Authorization
    allowCredentials: false

functions:

  authorizerFunc:
    handler: routes/v1/authorizerRoutes.handler
    description: 'Check Authorization for all end point'
  users:
    handler: routes/v1/appRoutes.handler
    description: 'Test CloudApps / Users API'
    events:
      - http:
          path: v1/appid
          method: POST
          cors: ${self:custom.cors}
          private: false

  qraphql:
    handler: routes/v1/qraphqlRoutes.handler
    description: 'Test CloudApps / qraphql get user api'
    events:
       - http:
          path: v1/graphql
          method: POST
          cors: ${self:custom.cors}
          private: false

